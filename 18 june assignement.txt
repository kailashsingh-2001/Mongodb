1. Group users by age and calculate the average salary for each age group.
==>db.users.aggregate(
    [
    {
        $group: {
            _id: "$age",
            averageSalary: { $avg: "$salary" }
        }
    }
    
]


)
2. Group users by city and find the user with the highest number of skills in each city.
==>db.users.aggregate(
   [
        {
            $unwind:"$skills"
        },
        {
            $group:{
                _id:"$city",
                skills:{$max:"$skills"}
            }
        },
        {
        $project: {
        role:"$_id",
        skills:1
      
    }
        }
    ]
)
3. Group users by role and determine the average age for each role.
==>db.users.aggregate(
    [
    {
        $group: {
            _id: "$role",
            averageAge: { $avg: "$age" }
        }
    },
    {
        $project: {
        role:"$_id",
        averageAge:1
      
            }
    }
]

    
)
4. Group users by skills and calculate the average salary for users with each skill.
==>db.users.aggregate(
[
    {
        $unwind:"$skills"
    },
    {
        $group:{
            _id:"$skills",
            averageSalary:{$avg:"$salary"}
        }
    },
    {
      $project: {
        skills:"$_id",
        averageSalary:1
        
      }
    }
]

    
)
5. Group users by gender and role, and find the total number of users in each subgroup.
==>db.users.aggregate(
    [
    {
        $group:{
            _id:{gender:"$gender",role:"$role"},
            totaluser:{$sum:1}
        }
    },
    {
      $project: {
        id:"$_id",
        totaluser:1
      }
    }
]
    
)
6. Group users by city and determine the total number of users in each city.
==>db.users.aggregate([
    {
        $group:{
            _id:"$city",
            totalusers:{$sum:1}
        }

    },
    {
       $project:{
        _id:"$_id",
        totalusers:1
       }
    }
]
    
)
7. Group users by role and calculate the average number of skills per user in each role.
==>db.users.aggregate([
    {
        $unwind:"$skills"
    },
    {
        $group:{
            _id:"$role",
            averageskills:{$a:"$skills"}
        }
    },
    {
      $project: {
        role:"$_id",
        averageskills:1
      }
    }

]
    
)
8. Group users by gender and find the average salary for each gender.
==>db.users.aggregate(
[
    
    {
        $group:{
            _id:"$gender",
            averagesalary:{$avg:"$salary"}
        }
    },
    {
      $project: {
        role:"$_id",
        averagesalary:1
      }
    }
]

    
)
9. Group users by city and role, and calculate the average age for users in each subgroup.
==>db.users.aggregate(
   [
    
    {
        $group:{
            _id:{city:"$city",role:"$role"},
            averageAge:{$avg:"$age"}
        }
    },
    {
      $project: {
        role:"$_id",
        averageAge:1
      }
    }
]
)
10. Group users by age and find the user with the highest salary in each age group.
==>db.users.aggregate([
    $group:{
        id_:"$age",
        maxsal:{$max:"$salary"}
    },
    {
      $project: {
        age:"$_id",
        maxsal:1
      }
    }
   
]
    
)
11. Group users by role and determine the total number of users in each role.
==>db.users.aggregate(
    [
    {
        $group: {
            _id: "$role",
            totalUsers: { $sum: 1 }
        }
    },
    {
      $project: {
        role:"$_id",
        totalUsers:1
      }
    }
   
]
    
)
12. Group users by gender and calculate the average number of skills per user in each gender.
==>db.users.aggregate(
    [
        {
            $unwind:"$skills",
        },
        {
            $group:{
                _id:"$gender",
                averageskills:{$sum:"$Skills"}

            }
        },
        {
            $project: {
            gender:"$_id",
            averageskills:1
                    }
       }
   
    ]
    
)
13. Group users by city and find the highest and lowest salaries for each city.
==>db.users.aggregate(
     [
    {
        $group: {
            _id: "$city",
            highestSalary: { $max: "$salary" },
            lowestSalary: { $min: "$salary" }
        }
    },
    {
      $project: {
        city:"$_id",
        highestSalary:1,
        lowestSalary:1
      }
    }
   
]
    
)
14. Group users by role and age, and calculate the average salary for each subgroup.
==> db.users.aggregate(
    
[
  {
    $group:{
      _id:{age: "$age",role:"$role"},
      averagesal:{$avg:"$salary"}
    }
  },
  {
    $project:{
      age:"$_id.age",
      
      averagesal:1
    }
  }
]
    
)
15. Group users by skills and determine the average age for users with each skill.
==>db.users.aggregate(
    [
  {
   $unwind:"$skills",
  },
  {
     $group:{
      _id:"$skills",
      averageAge:{$avg:"$age"}
      
    }

  },
  {
    $project:{
      skills:"$_id",
      averageAge:1


    }
  }
  
]
    
)